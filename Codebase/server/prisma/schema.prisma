// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  name         String?
  department   String?
  batch        Int?
  studentId    String?  @unique
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())

  profile   Profile?
  posts     Post[]
  reactions PostReaction[]
  events    Event[]        @relation("CreatedEvents")
  rsvps     EventRsvp[]
  catVotes  CatVote[]

  lostAndFounds  LostAndFound[]
  uploadedCats   Cat[]
  questionPapers QuestionPaper[]

  jobs      Job[]     @relation("UserJobs") // âœ… Added relation back to Job
  jobComments JobComment[] // Comments made by this user on jobs
  jobApplications JobApplication[] @relation("JobApplications") // Applications made by this user
  
  // Confession relations (for tracking reactions and poll votes only)
  confessionReactions ConfessionReaction[] @relation("ConfessionReactions")
  confessionPollVotes ConfessionPollVote[] @relation("ConfessionPollVotes")
  catPosts         CatPost[]
  catPostLikes     CatPostLike[]
  catPostComments  CatPostComment[]
  catQuestions     CatQuestion[]
  catAnswers       CatAnswer[]
  
  // Chat/Messaging relations
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  conversations1   Conversation[] @relation("User1Conversations")
  conversations2   Conversation[] @relation("User2Conversations")
}

model Profile {
  userId           Int      @id
  bio              String?
  profilePicture   String?
  coverPicture     String?
  interests        String[]
  badges           String[]
  schoolName       String?   // SSC institution
  collegeName      String?   // HSC institution
  currentProgram   String?
  currentYear      String?
  currentSemester  String?
  hometown         String?
  currentResidence String?
  currentHall      String?
  currentRoom      String?
  currentBed       String?
  user User @relation(fields: [userId], references: [id])
}

enum JobType {
  Internship
  Freelance
  PartTime
  Volunteer
}

model Job {
  id           Int      @id @default(autoincrement())
  title        String
  type         JobType
  description  String
  requirements String[]
  compensation String?
  deadline     DateTime?
  postedBy     User     @relation("UserJobs", fields: [postedById], references: [id])
  postedById   Int
  createdAt    DateTime @default(now())
  
  comments     JobComment[] // Comments on this job
  applications JobApplication[] // Applications for this job
}

model JobApplication {
  id          Int      @id @default(autoincrement())
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId       Int
  applicant   User     @relation("JobApplications", fields: [applicantId], references: [id])
  applicantId Int
  appliedAt   DateTime @default(now())
  
  @@unique([jobId, applicantId]) // One application per user per job
  @@index([jobId])
  @@index([applicantId])
}

model JobComment {
  id          Int      @id @default(autoincrement())
  content     String
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId       Int
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Self-referencing relationship for replies
  parentComment   JobComment? @relation("CommentReplies", fields: [parentCommentId], references: [id])
  parentCommentId Int?
  replies         JobComment[] @relation("CommentReplies")
  
  @@index([jobId])
  @@index([authorId])
  @@index([parentCommentId])
}

model Post {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  content     String
  category    String
  isAnonymous Boolean  @default(false)
  createdAt   DateTime @default(now())

  reactions PostReaction[]
  tags      PostTag[]
}

model PostReaction {
  id           Int    @id @default(autoincrement())
  post         Post   @relation(fields: [postId], references: [id])
  postId       Int
  user         User   @relation(fields: [userId], references: [id])
  userId       Int
  reactionType String

  @@unique([postId, userId])
}

model ConfessionTag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  posts PostTag[]
}

model PostTag {
  postId Int
  tagId  Int
  post   Post          @relation(fields: [postId], references: [id])
  tag    ConfessionTag @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  location    String
  eventDate   DateTime
  createdBy   User     @relation("CreatedEvents", fields: [createdById], references: [id])
  createdById Int

  rsvps EventRsvp[]
}

model EventRsvp {
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  event   Event @relation(fields: [eventId], references: [id])
  eventId Int

  @@id([userId, eventId])
}

model LostAndFound {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  type        String   // "lost" or "found"
  title       String
  description String
  image       String?
  location    String
  contact     String
  status      String   @default("active") // "active" or "resolved"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Cat {
  id           Int      @id @default(autoincrement())
  name         String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById Int
  image        String
  createdAt    DateTime @default(now())

  votes CatVote[]
}

model CatVote {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  cat    Cat  @relation(fields: [catId], references: [id])
  catId  Int

  @@id([userId, catId])
}

model QuestionPaper {
  id           Int      @id @default(autoincrement())
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById Int
  department   String
  courseCode   String
  semester     String
  fileUrl      String
  uploadedAt   DateTime @default(now())
}

// Confession Models
model Confession {
  id        Int      @id @default(autoincrement())
  content   String
  tag       String
  createdAt DateTime @default(now())

  reactions ConfessionReaction[]
  poll      ConfessionPoll?
}

model ConfessionReaction {
  id           Int        @id @default(autoincrement())
  confession   Confession @relation(fields: [confessionId], references: [id], onDelete: Cascade)
  confessionId Int
  user         User       @relation("ConfessionReactions", fields: [userId], references: [id])
  userId       Int
  reactionType String     // "like", "funny", "relatable", "angry", "insightful"
  createdAt    DateTime   @default(now())

  @@unique([confessionId, userId]) // One reaction per user per confession
  @@index([confessionId])
  @@index([userId])
}

model ConfessionPoll {
  id           Int                    @id @default(autoincrement())
  confession   Confession             @relation(fields: [confessionId], references: [id], onDelete: Cascade)
  confessionId Int                    @unique
  question     String
  totalVotes   Int                    @default(0)
  createdAt    DateTime               @default(now())

  options ConfessionPollOption[]
  votes   ConfessionPollVote[]
}

model ConfessionPollOption {
  id       Int            @id @default(autoincrement())
  poll     ConfessionPoll @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId   Int
  text     String
  votes    Int            @default(0)
  orderIndex Int          // To maintain option order

  pollVotes ConfessionPollVote[]

  @@index([pollId])
}

model ConfessionPollVote {
  id       Int                  @id @default(autoincrement())
  poll     ConfessionPoll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId   Int
  option   ConfessionPollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId Int
  user     User                 @relation("ConfessionPollVotes", fields: [userId], references: [id])
  userId   Int
  votedAt  DateTime             @default(now())

  @@unique([pollId, userId]) // One vote per poll per user
  @@index([pollId])
  @@index([userId])
}

// Add to schema.prisma
model CatPost {
  id        Int      @id @default(autoincrement())
  userId    Int?
  caption   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user     User?           @relation(fields: [userId], references: [id])
  likes    CatPostLike[]
  comments CatPostComment[]
}

model CatPostLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  catPostId Int
  createdAt DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id])
  catPost CatPost @relation(fields: [catPostId], references: [id], onDelete: Cascade)
  
  @@unique([userId, catPostId])
}

model CatPostComment {
  id        Int      @id @default(autoincrement())
  userId    Int
  catPostId Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User    @relation(fields: [userId], references: [id])
  catPost CatPost @relation(fields: [catPostId], references: [id], onDelete: Cascade)
}

model CatQuestion {
  id        Int      @id @default(autoincrement())
  userId    Int?
  question  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User?       @relation(fields: [userId], references: [id])
  answers CatAnswer[]
}

model CatAnswer {
  id           Int      @id @default(autoincrement())
  userId       Int?
  questionId   Int
  answer       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user     User?       @relation(fields: [userId], references: [id])
  question CatQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

// Chat/Messaging Models
model Conversation {
  id          Int      @id @default(autoincrement())
  user1       User     @relation("User1Conversations", fields: [user1Id], references: [id])
  user1Id     Int
  user2       User     @relation("User2Conversations", fields: [user2Id], references: [id])
  user2Id     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Track last message for conversation preview
  lastMessageAt DateTime?
  lastMessage   String?
  
  messages Message[]
  
  // Ensure unique conversation between two users (regardless of order)
  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
  @@index([updatedAt])
}

model Message {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  senderId       Int
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId     Int
  content        String
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
}