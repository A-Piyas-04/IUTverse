generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                       @id @default(autoincrement())
  email               String                    @unique
  passwordHash        String
  name                String?
  department          String?
  batch               Int?
  studentId           String?                   @unique
  isVerified          Boolean                   @default(false)
  createdAt           DateTime                  @default(now())
  uploadedCats        Cat[]
  catAnswers          CatAnswer[]
  catPosts            CatPost[]
  catPostComments     CatPostComment[]
  catPostLikes        CatPostLike[]
  catQuestions        CatQuestion[]
  catVotes            CatVote[]
  receivedMessages    ChatMessage[]             @relation("ReceivedMessages")
  sentMessages        ChatMessage[]             @relation("SentMessages")
  confessionPollVotes ConfessionPollVote[]      @relation("ConfessionPollVotes")
  confessionReactions ConfessionReaction[]      @relation("ConfessionReactions")
  conversations       ConversationParticipant[]
  events              Event[]                   @relation("CreatedEvents")
  rsvps               EventRsvp[]
  jobs                Job[]                     @relation("UserJobs")
  jobApplications     JobApplication[]          @relation("JobApplications")
  jobComments         JobComment[]
  lostAndFounds       LostAndFound[]
  posts               Post[]
  comments            PostComment[]
  reactions           PostReaction[]
  profile             Profile?
  questionPapers      QuestionPaper[]
}

model Profile {
  userId           Int      @id
  bio              String?
  profilePicture   String?
  interests        String[]
  badges           String[]
  collegeName      String?
  currentBed       String?
  currentHall      String?
  currentProgram   String?
  currentResidence String?
  currentRoom      String?
  currentSemester  String?
  currentYear      String?
  hometown         String?
  schoolName       String?
  coverPicture     String?
  user             User     @relation(fields: [userId], references: [id])
}

model Job {
  id           Int              @id @default(autoincrement())
  title        String
  type         JobType
  description  String
  requirements String[]
  compensation String?
  deadline     DateTime?
  postedById   Int
  createdAt    DateTime         @default(now())
  postedBy     User             @relation("UserJobs", fields: [postedById], references: [id])
  applications JobApplication[]
  comments     JobComment[]
}

model JobApplication {
  id          Int      @id @default(autoincrement())
  jobId       Int
  applicantId Int
  appliedAt   DateTime @default(now())
  applicant   User     @relation("JobApplications", fields: [applicantId], references: [id])
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([jobId, applicantId])
  @@index([jobId])
  @@index([applicantId])
}

model JobComment {
  id              Int          @id @default(autoincrement())
  content         String
  jobId           Int
  authorId        Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  parentCommentId Int?
  author          User         @relation(fields: [authorId], references: [id])
  job             Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)
  parentComment   JobComment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         JobComment[] @relation("CommentReplies")

  @@index([jobId])
  @@index([authorId])
  @@index([parentCommentId])
}

model Post {
  id          Int            @id @default(autoincrement())
  userId      Int
  content     String
  category    String
  isAnonymous Boolean        @default(false)
  createdAt   DateTime       @default(now())
  image       String?
  likesCount  Int            @default(0)
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id])
  comments    PostComment[]
  reactions   PostReaction[]
  tags        PostTag[]
}

model PostReaction {
  id           Int    @id @default(autoincrement())
  postId       Int
  userId       Int
  reactionType String
  post         Post   @relation(fields: [postId], references: [id])
  user         User   @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}

model PostComment {
  id              Int           @id @default(autoincrement())
  postId          Int
  userId          Int
  content         String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  parentCommentId Int?
  parentComment   PostComment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         PostComment[] @relation("CommentReplies")
  post            Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id])

  @@index([postId])
  @@index([userId])
  @@index([parentCommentId])
}

model ConfessionTag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  posts PostTag[]
}

model PostTag {
  postId Int
  tagId  Int
  post   Post          @relation(fields: [postId], references: [id])
  tag    ConfessionTag @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Event {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  location    String
  eventDate   DateTime
  createdById Int
  createdBy   User        @relation("CreatedEvents", fields: [createdById], references: [id])
  rsvps       EventRsvp[]
}

model EventRsvp {
  userId  Int
  eventId Int
  event   Event @relation(fields: [eventId], references: [id])
  user    User  @relation(fields: [userId], references: [id])

  @@id([userId, eventId])
}

model LostAndFound {
  id          Int      @id @default(autoincrement())
  userId      Int
  type        String
  title       String
  description String
  image       String?
  location    String
  createdAt   DateTime @default(now())
  contact     String
  status      String   @default("active")
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Cat {
  id           Int       @id @default(autoincrement())
  name         String
  uploadedById Int
  image        String
  createdAt    DateTime  @default(now())
  uploadedBy   User      @relation(fields: [uploadedById], references: [id])
  votes        CatVote[]
}

model CatVote {
  userId Int
  catId  Int
  cat    Cat  @relation(fields: [catId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@id([userId, catId])
}

model QuestionPaper {
  id           Int      @id @default(autoincrement())
  uploadedById Int
  department   String
  courseCode   String
  semester     String
  fileUrl      String
  uploadedAt   DateTime @default(now())
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
}

model AcademicResource {
  id           Int          @id @default(autoincrement())
  title        String
  type         ResourceType
  departmentId Int
  fileUrl      String?
  externalLink String?
  createdAt    DateTime     @default(now())
  courseCode   String?
  department   Department   @relation(fields: [departmentId], references: [id])
}

model Department {
  id        Int                @id @default(autoincrement())
  name      String             @unique
  resources AcademicResource[]
}

model Confession {
  id        Int                  @id @default(autoincrement())
  content   String
  tag       String
  createdAt DateTime             @default(now())
  poll      ConfessionPoll?
  reactions ConfessionReaction[]
}

model ConfessionReaction {
  id           Int        @id @default(autoincrement())
  confessionId Int
  userId       Int
  reactionType String
  createdAt    DateTime   @default(now())
  confession   Confession @relation(fields: [confessionId], references: [id], onDelete: Cascade)
  user         User       @relation("ConfessionReactions", fields: [userId], references: [id])

  @@unique([confessionId, userId])
  @@index([confessionId])
  @@index([userId])
}

model ConfessionPoll {
  id           Int                    @id @default(autoincrement())
  confessionId Int                    @unique
  question     String
  totalVotes   Int                    @default(0)
  createdAt    DateTime               @default(now())
  confession   Confession             @relation(fields: [confessionId], references: [id], onDelete: Cascade)
  options      ConfessionPollOption[]
  votes        ConfessionPollVote[]
}

model ConfessionPollOption {
  id         Int                  @id @default(autoincrement())
  pollId     Int
  text       String
  votes      Int                  @default(0)
  orderIndex Int
  poll       ConfessionPoll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollVotes  ConfessionPollVote[]

  @@index([pollId])
}

model ConfessionPollVote {
  id       Int                  @id @default(autoincrement())
  pollId   Int
  optionId Int
  userId   Int
  votedAt  DateTime             @default(now())
  option   ConfessionPollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  poll     ConfessionPoll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user     User                 @relation("ConfessionPollVotes", fields: [userId], references: [id])

  @@unique([pollId, userId])
  @@index([pollId])
  @@index([userId])
}

model CatPost {
  id        Int              @id @default(autoincrement())
  userId    Int?
  caption   String
  image     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User?            @relation(fields: [userId], references: [id])
  comments  CatPostComment[]
  likes     CatPostLike[]
}

model CatPostLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  catPostId Int
  createdAt DateTime @default(now())
  catPost   CatPost  @relation(fields: [catPostId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, catPostId])
}

model CatPostComment {
  id        Int      @id @default(autoincrement())
  userId    Int
  catPostId Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  catPost   CatPost  @relation(fields: [catPostId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model CatQuestion {
  id        Int         @id @default(autoincrement())
  userId    Int?
  question  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  answers   CatAnswer[]
  user      User?       @relation(fields: [userId], references: [id])
}

model CatAnswer {
  id         Int         @id @default(autoincrement())
  userId     Int?
  questionId Int
  answer     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  question   CatQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User?       @relation(fields: [userId], references: [id])
}

model Conversation {
  id           Int                       @id @default(autoincrement())
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  messages     ChatMessage[]
  participants ConversationParticipant[]
}

model ConversationParticipant {
  id             Int          @id @default(autoincrement())
  conversationId Int
  userId         Int
  joinedAt       DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id])

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
}

model ChatMessage {
  id             Int          @id @default(autoincrement())
  conversationId Int
  senderId       Int
  receiverId     Int
  content        String
  sentAt         DateTime     @default(now())
  isRead         Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
}

enum JobType {
  Internship
  Freelance
  PartTime
  Volunteer
}

enum ResourceType {
  QUESTION
  NOTE
  BOOK
  OTHER
  CLASS_LECTURE
}
