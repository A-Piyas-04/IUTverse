// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  name         String?
  department   String?
  batch        Int?
  studentId    String?  @unique
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())

  profile   Profile?
  posts     Post[]
  reactions PostReaction[]
  events    Event[]        @relation("CreatedEvents")
  rsvps     EventRsvp[]
  catVotes  CatVote[]

  lostAndFounds    LostAndFound[]
  uploadedCats     Cat[]
  questionPapers   QuestionPaper[]
  catPosts         CatPost[]
  catPostLikes     CatPostLike[]
  catPostComments  CatPostComment[]
  catQuestions     CatQuestion[]
  catAnswers       CatAnswer[]
}

model Profile {
  userId           Int      @id
  bio              String?
  profilePicture   String?
  interests        String[]
  badges           String[]
  schoolName       String?   // SSC institution
  collegeName      String?   // HSC institution
  currentProgram   String?
  currentYear      String?
  currentSemester  String?
  hometown         String?
  currentResidence String?
  currentHall      String?
  currentRoom      String?
  currentBed       String?
  user User @relation(fields: [userId], references: [id])
}

model Post {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  content     String
  category    String
  isAnonymous Boolean  @default(false)
  createdAt   DateTime @default(now())

  reactions PostReaction[]
  tags      PostTag[]
}

model PostReaction {
  id           Int    @id @default(autoincrement())
  post         Post   @relation(fields: [postId], references: [id])
  postId       Int
  user         User   @relation(fields: [userId], references: [id])
  userId       Int
  reactionType String

  @@unique([postId, userId])
}

model ConfessionTag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  posts PostTag[]
}

model PostTag {
  postId Int
  tagId  Int
  post   Post          @relation(fields: [postId], references: [id])
  tag    ConfessionTag @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  location    String
  eventDate   DateTime
  createdBy   User     @relation("CreatedEvents", fields: [createdById], references: [id])
  createdById Int

  rsvps EventRsvp[]
}

model EventRsvp {
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  event   Event @relation(fields: [eventId], references: [id])
  eventId Int

  @@id([userId, eventId])
}

model LostAndFound {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  type        String   // "lost" or "found"
  title       String
  description String
  image       String?
  location    String
  contact     String
  status      String   @default("active") // "active" or "resolved"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Cat {
  id           Int      @id @default(autoincrement())
  name         String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById Int
  image        String
  createdAt    DateTime @default(now())

  votes CatVote[]
}

model CatVote {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  cat    Cat  @relation(fields: [catId], references: [id])
  catId  Int

  @@id([userId, catId])
}

model QuestionPaper {
  id           Int      @id @default(autoincrement())
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById Int
  department   String
  courseCode   String
  semester     String
  fileUrl      String
  uploadedAt   DateTime @default(now())
}

// Add to schema.prisma
model CatPost {
  id        Int      @id @default(autoincrement())
  userId    Int?
  caption   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user     User?           @relation(fields: [userId], references: [id])
  likes    CatPostLike[]
  comments CatPostComment[]
}

model CatPostLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  catPostId Int
  createdAt DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id])
  catPost CatPost @relation(fields: [catPostId], references: [id], onDelete: Cascade)
  
  @@unique([userId, catPostId])
}

model CatPostComment {
  id        Int      @id @default(autoincrement())
  userId    Int
  catPostId Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User    @relation(fields: [userId], references: [id])
  catPost CatPost @relation(fields: [catPostId], references: [id], onDelete: Cascade)
}

model CatQuestion {
  id        Int      @id @default(autoincrement())
  userId    Int?
  question  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User?       @relation(fields: [userId], references: [id])
  answers CatAnswer[]
}

model CatAnswer {
  id           Int      @id @default(autoincrement())
  userId       Int?
  questionId   Int
  answer       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user     User?       @relation(fields: [userId], references: [id])
  question CatQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}